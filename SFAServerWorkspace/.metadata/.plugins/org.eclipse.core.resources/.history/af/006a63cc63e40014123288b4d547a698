package com.adam4.geometry;

import java.util.ArrayList;

import com.adam4.common.Point;

public class ConvexHull
{
	/*
	 * This function will make compartmentalize the convex hull problem and solve it using 
	 * a divide and conquer approach. To being, it will identify four key points (North, East, South, and West)
	 * based on the largest magnitude of X and Y coordinates, then create four boxes between SE, EN, NW, WS (in counter-clockwise order),
	 * and 
	 */
	public static ArrayList<Point> findConvexPoints(ArrayList<Point> input)
	{
		
		
		
		return input;
	}
	
	/* This function will go through the points in a counter-clockwise order from start to end and trim all the
	 * input points that are below the line 
	 * 
	 * 
	 */
	public static ArrayList<Point> findConvexPoints(ArrayList<Point> input, Point start, Point end)
	{
		// TODO: remove trig and use computational geometry instead, i.e. vectors
		ArrayList<Point> output = new ArrayList<Point>();
		output.add(start);
		
		double comp = Point.getAngleBetweenPoints(start, end);
		Point split = null;
		for (Point p : input)
		{
			if (Point.getAngleBetweenPoints(start, p) < comp)
			{
				input.remove(p);
			}
			else if (Point.getAngleBetweenPoints(start, p) > comp)
			{
				split = p;
				break;
			}
		}
		if (split != null)
		{
			for (Point p : input)
			{
				
			}
		}
		
		output.addAll(findConvexPoints(input, start, p));
		
		return output;
	}
}
